I. Check OS information
-------------------------------------------------------------
uname –a
more /etc/redhat-release 

lscpu
free -m
grep Huge /proc/meminfo 


df -h
df -h /tmp

more /etc/hosts
ifconfig


--Top CPU
ps -eo pcpu,pid,user,args | sort -k1 -r -n | head -20 

--Top memory
ps aux | sort -rnk 4 | head -20 



II. Check cluster
-------------------------------------------------------------
crsctl stat res -t
crsctl stat res –t -init
crsctl stat res xxxx -p

olsnodes -n
srvctl status asm -a
crsctl query css votedisk



III. Check Database information
-------------------------------------------------------------
ps -ef | grep smon
pwdx xxxx


show parameter name
select name, DATABASE_ROLE, OPEN_MODE from v$database;
show parameter spfile
show parameter control_files;                 
SELECT * FROM V$DIAG_INFO;
show parameter ga

select * from v$log
select * from v$logfile


SELECT distinct SID,serial#, USERNAME, OSUSER,inst_id,machine   
FROM  gv$session    
order by 3


SELECT OPNAME, CONTEXT, SOFAR, TOTALWORK,ROUND(SOFAR/TOTALWORK*100,2) "%_COMPLETE"
FROM gV$SESSION_LONGOPS   
WHERE OPNAME NOT LIKE '%aggregate%'       
AND TOTALWORK != 0      
AND SOFAR <> TOTALWORK; 




set lines 200 
set pages 200

archive log list;	
show parameter recover	
select * from v$flash_recovery_area_usage;

select sum(bytes/1024/1024/1024) from v$datafile;

select sum(bytes/1024/1024/1024) from  dba_segments; 

COLUMN group_name             FORMAT a25           HEAD 'Disk Group|Name'
COLUMN sector_size            FORMAT 99,999        HEAD 'Sector|Size'
COLUMN block_size             FORMAT 99,999        HEAD 'Block|Size'
COLUMN allocation_unit_size   FORMAT 999,999,999   HEAD 'Allocation|Unit Size'
COLUMN state                  FORMAT a11           HEAD 'State'
COLUMN type                   FORMAT a6            HEAD 'Type'
COLUMN total_mb               FORMAT 999,999,999   HEAD 'Total Size (MB)'
COLUMN used_mb                FORMAT 999,999,999   HEAD 'Used Size (MB)'
COLUMN pct_used               FORMAT 999.99        HEAD 'Pct. Used'
BREAK ON report ON disk_group_name SKIP 1
COMPUTE sum LABEL "Grand Total: " OF total_mb used_mb ON report
SELECT
    name                                     group_name
  , sector_size                              sector_size
  , block_size                               block_size
  , allocation_unit_size                     allocation_unit_size
  , state                                    state
  , type                                     type
  , total_mb                                 total_mb
  , (total_mb - free_mb)                     used_mb
  , ROUND((1- (free_mb / total_mb))*100, 2)  pct_used
FROM
    v$asm_diskgroup
WHERE
    total_mb != 0
ORDER BY
    name;


select TABLESPACE_NAME, TRUNC(TABLESPACE_SIZE/1024/1024/1024,2) SIZE_GB, 
TRUNC(ALLOCATED_SPACE/1024/1024/1024,2) ALLOCATED_GB, 
TRUNC(FREE_SPACE/1024/1024/1024,2) FREE_GB,
TRUNC(((ALLOCATED_SPACE - FREE_SPACE)/ALLOCATED_SPACE*100),2) "% USED"  
from dba_temp_free_space;


column "TOTAL ALLOC (MB)" for 999,999,999,990.00	
column "TOTAL PHYS ALLOC (MB)" for 99,999,990.00	
column "USED (MB)" for 99,999,990.00	
column "FREE (MB)" for 9,999,990.00	
column "% USED" for 990.00	
select 
   a.tablespace_name,	
   a.bytes_alloc/(1024*1024) "TOTAL ALLOC (MB)",	
   a.physical_bytes/(1024*1024) "TOTAL PHYS ALLOC (MB)",	
   nvl(b.tot_used,0)/(1024*1024) "USED (MB)",	
   (nvl(b.tot_used,0)/a.bytes_alloc)*100 "% USED" 	
from 	
   (select 	
      tablespace_name, 	
	  sum(bytes) physical_bytes, 
      sum(decode(autoextensible,'NO',bytes,'YES',maxbytes)) bytes_alloc 
    from 
      dba_data_files 
    group by 
      tablespace_name ) a,
   (select 
      tablespace_name, 
      sum(bytes) tot_used 
    from 
      dba_extents
    group by 
      tablespace_name ) b
where 
   a.tablespace_name = b.tablespace_name (+) 
order by 1;



IV. Check backup
------------------------------------------------------------------------
set lines 200 
set pages 200 
col cf for 9,999 
col df for 9,999 
col elapsed_seconds heading "ELAPSED|SECONDS" 
col i0 for 9,999 
col i1 for 9,999 
col l for 9,999 
col output_GB for 9,999,999 heading "OUTPUT|GB" 
col session_recid for 999999 heading "SESSION|RECID" 
col session_stamp for 99999999999 heading "SESSION|STAMP" 
col start_time for a20 
col end_time for a20 
col status for a25 
col DAY for a10 
col BK_LV for a10
col time_taken_display for a10 heading "TIME|TAKEN" 
col output_instance for 9999 heading "OUT|INST" 
select 
  j.session_recid, j.session_stamp, 
  to_char(j.start_time, 'yyyy-mm-dd hh24:mi:ss') start_time, 
  to_char(j.end_time, 'yyyy-mm-dd hh24:mi:ss') end_time, 
  (j.output_bytes/1024/1024/1024) output_GB, j.status, j.input_type, 
  decode(to_char(j.start_time, 'd'), 1, 'Sunday', 2, 'Monday', 
                                     3, 'Tuesday', 4, 'Wednesday', 
                                     5, 'Thursday', 6, 'Friday', 
                                     7, 'Saturday') DAY, x.i1,
     (case when x.i1 >0 then 'Lv1' when x.i1 =0 then 'Lv0' else 'not exist' end) bk_lv,
   j.elapsed_seconds, j.time_taken_display 
from V$RMAN_BACKUP_JOB_DETAILS j 
  left outer join (select 
                     d.session_recid, d.session_stamp, 
                     sum(case when d.controlfile_included = 'YES' then d.pieces else 0 end) CF, 
                     sum(case when d.controlfile_included = 'NO' 
                               and d.backup_type||d.incremental_level = 'D' then d.pieces else 0 end) DF, 
                     sum(case when d.backup_type||d.incremental_level = 'D0' then d.pieces else 0 end) I0, 
                     sum(case when d.backup_type||d.incremental_level = 'I1' then d.pieces else 0 end) I1, 
                     sum(case when d.backup_type = 'L' then d.pieces else 0 end) L 
                   from 
                     V$BACKUP_SET_DETAILS d 
                     join V$BACKUP_SET s on s.set_stamp = d.set_stamp and s.set_count = d.set_count 
                   where s.input_file_scan_only = 'NO' 
                   group by d.session_recid, d.session_stamp) x 
    on x.session_recid = j.session_recid and x.session_stamp = j.session_stamp 
  left outer join (select o.session_recid, o.session_stamp, min(inst_id) inst_id 
                   from GV$RMAN_OUTPUT o 
                   group by o.session_recid, o.session_stamp) 
    ro on ro.session_recid = j.session_recid and ro.session_stamp = j.session_stamp 
where j.start_time > trunc(sysdate)-15
order by j.start_time;   



V. Check dataguard
------------------------------------------------------------------------
select PROCESS,STATUS,BLOCK#,BLOCKS,SEQUENCE#,THREAD# from v$managed_standby; 
set lines 300 
col value for a50 
select name, value from v$dataguard_stats; 


 alter database recover managed standby database cancel; 
 ALTER DATABASE RECOVER MANAGED STANDBY DATABASE USING CURRENT LOGFILE DISCONNECT FROM SESSION; 
