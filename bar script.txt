set lines 200 
set pages 200
select name, DATABASE_ROLE, OPEN_MODE from v$database;
	
archive log list;	
show parameter recover	
select * from v$flash_recovery_area_usage;

select sum(bytes/1024/1024/1024) from v$datafile;

select sum(bytes/1024/1024/1024) from  dba_segments; 

COLUMN group_name             FORMAT a25           HEAD 'Disk Group|Name'
COLUMN sector_size            FORMAT 99,999        HEAD 'Sector|Size'
COLUMN block_size             FORMAT 99,999        HEAD 'Block|Size'
COLUMN allocation_unit_size   FORMAT 999,999,999   HEAD 'Allocation|Unit Size'
COLUMN state                  FORMAT a11           HEAD 'State'
COLUMN type                   FORMAT a6            HEAD 'Type'
COLUMN total_mb               FORMAT 999,999,999   HEAD 'Total Size (MB)'
COLUMN used_mb                FORMAT 999,999,999   HEAD 'Used Size (MB)'
COLUMN pct_used               FORMAT 999.99        HEAD 'Pct. Used'
BREAK ON report ON disk_group_name SKIP 1
COMPUTE sum LABEL "Grand Total: " OF total_mb used_mb ON report
SELECT
    name                                     group_name
  , sector_size                              sector_size
  , block_size                               block_size
  , allocation_unit_size                     allocation_unit_size
  , state                                    state
  , type                                     type
  , total_mb                                 total_mb
  , (total_mb - free_mb)                     used_mb
  , ROUND((1- (free_mb / total_mb))*100, 2)  pct_used
FROM
    v$asm_diskgroup
WHERE
    total_mb != 0
ORDER BY
    name;


select TABLESPACE_NAME, TRUNC(TABLESPACE_SIZE/1024/1024/1024,2) SIZE_GB, 
TRUNC(ALLOCATED_SPACE/1024/1024/1024,2) ALLOCATED_GB, 
TRUNC(FREE_SPACE/1024/1024/1024,2) FREE_GB,
TRUNC(((ALLOCATED_SPACE - FREE_SPACE)/ALLOCATED_SPACE*100),2) "% USED"  
from dba_temp_free_space;


column "TOTAL ALLOC (MB)" for 999,999,999,990.00	
column "TOTAL PHYS ALLOC (MB)" for 99,999,990.00	
column "USED (MB)" for 99,999,990.00	
column "FREE (MB)" for 9,999,990.00	
column "% USED" for 990.00	
select 
   a.tablespace_name,	
   a.bytes_alloc/(1024*1024) "TOTAL ALLOC (MB)",	
   a.physical_bytes/(1024*1024) "TOTAL PHYS ALLOC (MB)",	
   nvl(b.tot_used,0)/(1024*1024) "USED (MB)",	
   (nvl(b.tot_used,0)/a.bytes_alloc)*100 "% USED" 	
from 	
   (select 	
      tablespace_name, 	
	  sum(bytes) physical_bytes, 
      sum(decode(autoextensible,'NO',bytes,'YES',maxbytes)) bytes_alloc 
    from 
      dba_data_files 
    group by 
      tablespace_name ) a,
   (select 
      tablespace_name, 
      sum(bytes) tot_used 
    from 
      dba_extents
    group by 
      tablespace_name ) b
where 
   a.tablespace_name = b.tablespace_name (+) 
order by 1;




set lines 200 
set pages 200 
col name for a20 
show pdbs; 
select con_id, name, open_mode, total_size/1024/1024/1024 GB from v$pdbs; 


alter session set container=&pdb_name;


alter system archive log current;  
archive log list; 


set lines 300
col value for a50
SELECT SYSDATE, TO_CHAR(CURRENT_SCN) AS current_scn_value, SCN_TO_TIMESTAMP(CURRENT_SCN) AS current_scn_timestamp
FROM v$database;
select PROCESS,STATUS,BLOCK#,BLOCKS,SEQUENCE#,THREAD#   from v$managed_standby;
select name, value from v$dataguard_stats;




set lines 200 
set pages 200 
SELECT OPNAME, CONTEXT, SOFAR, TOTALWORK,
   	ROUND(SOFAR/TOTALWORK*100,2) "%_COMPLETE"
    	FROM gV$SESSION_LONGOPS
    	WHERE OPNAME LIKE 'RMAN%'
    	AND OPNAME NOT LIKE '%aggregate%'
    	AND TOTALWORK != 0
    	AND SOFAR <> TOTALWORK; 
		
		
set lines 200 
set pages 200 
col cf for 9,999 
col df for 9,999 
col elapsed_seconds heading "ELAPSED|SECONDS" 
col i0 for 9,999 
col i1 for 9,999 
col l for 9,999 
col output_GB for 9,999,999 heading "OUTPUT|GB" 
col session_recid for 999999 heading "SESSION|RECID" 
col session_stamp for 99999999999 heading "SESSION|STAMP" 
col start_time for a20 
col end_time for a20 
col status for a25 
col DAY for a10 
col BK_LV for a10
col time_taken_display for a10 heading "TIME|TAKEN" 
col output_instance for 9999 heading "OUT|INST" 
select 
  j.session_recid, j.session_stamp, 
  to_char(j.start_time, 'yyyy-mm-dd hh24:mi:ss') start_time, 
  to_char(j.end_time, 'yyyy-mm-dd hh24:mi:ss') end_time, 
  (j.output_bytes/1024/1024/1024) output_GB, j.status, j.input_type, 
  decode(to_char(j.start_time, 'd'), 1, 'Sunday', 2, 'Monday', 
                                     3, 'Tuesday', 4, 'Wednesday', 
                                     5, 'Thursday', 6, 'Friday', 
                                     7, 'Saturday') DAY, x.i1,
     (case when x.i1 >0 then 'Lv1' when x.i1 =0 then 'Lv0' else 'not exist' end) bk_lv,
	 j.elapsed_seconds, j.time_taken_display 
from V$RMAN_BACKUP_JOB_DETAILS j 
  left outer join (select 
                     d.session_recid, d.session_stamp, 
                     sum(case when d.controlfile_included = 'YES' then d.pieces else 0 end) CF, 
                     sum(case when d.controlfile_included = 'NO' 
                               and d.backup_type||d.incremental_level = 'D' then d.pieces else 0 end) DF, 
                     sum(case when d.backup_type||d.incremental_level = 'D0' then d.pieces else 0 end) I0, 
                     sum(case when d.backup_type||d.incremental_level = 'I1' then d.pieces else 0 end) I1, 
                     sum(case when d.backup_type = 'L' then d.pieces else 0 end) L 
                   from 
                     V$BACKUP_SET_DETAILS d 
                     join V$BACKUP_SET s on s.set_stamp = d.set_stamp and s.set_count = d.set_count 
                   where s.input_file_scan_only = 'NO' 
                   group by d.session_recid, d.session_stamp) x 
    on x.session_recid = j.session_recid and x.session_stamp = j.session_stamp 
  left outer join (select o.session_recid, o.session_stamp, min(inst_id) inst_id 
                   from GV$RMAN_OUTPUT o 
                   group by o.session_recid, o.session_stamp) 
    ro on ro.session_recid = j.session_recid and ro.session_stamp = j.session_stamp 
where j.start_time > trunc(sysdate)-30
order by j.start_time;   




---alter tablespace USERS add datafile '+DATAC1' size 1G autoextend on next 1G; 



set lines 200 
  set pages 200 
  col USERNAME for a15 
  col OSUSER for a15 
   col machine for a30 
   SELECT distinct SID,serial#, USERNAME, OSUSER,inst_id,machine
   FROM  gv$session 
   order by 3; --ALTER SYSTEM KILL SESSION 'sid,serial#,@inst_id';
   
   
   
set lines 200  set pages 200  SELECT OPNAME, CONTEXT, SOFAR, TOTALWORK,       ROUND(SOFAR/TOTALWORK*100,2) "%_COMPLETE"       FROM gV$SESSION_LONGOPS   WHERE OPNAME NOT LIKE '%aggregate%'       AND TOTALWORK != 0      AND SOFAR <> TOTALWORK; 



 set lines 200
 set pages 200
 col USERNAME for a25
 col ACCOUNT_STATUS for a30
 col DEFAULT_TABLESPACE for a20
 col TEMPORARY_TABLESPACE for a20
 col PROFILE for a20
 select USERNAME,ACCOUNT_STATUS,DEFAULT_TABLESPACE,TEMPORARY_TABLESPACE,PROFILE from dba_users order by 1; 




 set lines 200
 set pages 200
 col USERNAME for a25
 col ACCOUNT_STATUS for a30
 col DEFAULT_TABLESPACE for a20
 col TEMPORARY_TABLESPACE for a20
 col PROFILE for a20
 select USERNAME,ACCOUNT_STATUS,DEFAULT_TABLESPACE,TEMPORARY_TABLESPACE,PROFILE from dba_users order by 1; 




\n set lines 200
\n set pages 200
\n col blocking_sessions for a30
\n col USERNAME for a25
\n col OSUSER for a25
\n col machine for a40
\n 
\n SELECT l1.sid || ' is blocking ' || l2.sid blocking_sessions, USERNAME,OSUSER,machine,s.sql_id,c.sql_text
\n FROM gv$lock l1, gv$lock l2, gv$session s,gv$sql c
\n WHERE l1.block = 1
\n AND s.sid=l1.sid
\n AND l2.request > 0 
\n AND l1.id1 = l2.id1 
\n AND l1.id2 = l2.id2   
\n AND l1.inst_id=l2.inst_id
\n and s.sql_id=c.sql_id(+) and s.inst_id=c.inst_id(+);




 col owner for a15  col machine for a30 
  set lines 200 
  set pages 200 
  col ORACLE_USERNAME for a15 
  col OS_USER_NAME for a15  col OBJECT_NAME for a20  
   SELECT distinct A.session_id,C.serial#,B.Owner, B.Object_Name, A.Oracle_Username, A.OS_User_Name,A.LOCKED_MODE,machine 
   FROM gV$Locked_Object A, All_Objects B ,gv$session C
 WHERE A.Object_ID = B.Object_ID 
 AND A.session_id=C.sid
 AND C.username=A.Oracle_Username and  a.inst_id=c.inst_id 
 AND C.osuser=A.OS_User_Name
  order by 1,2,3; 
  
  
  
  
  select INST_ID, OPERATION, STATE, POWER, SOFAR, EST_WORK, EST_RATE, EST_MINUTES from GV$ASM_OPERATION; 
  
  
  SET TERMOUT OFF; 
COLUMN current_instance NEW_VALUE current_instance NOPRINT;
SELECT rpad(sys_context('USERENV', 'INSTANCE_NAME'), 17) current_instance FROM dual;
SET TERMOUT ON;

SET ECHO        OFF
SET FEEDBACK    6
SET HEADING     ON
SET LINESIZE    180
SET PAGESIZE    50000
SET TERMOUT     ON
SET TIMING      OFF
SET TRIMOUT     ON
SET TRIMSPOOL   ON
SET VERIFY      OFF

CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES

COLUMN disk_group_name        FORMAT a25           HEAD 'Disk Group Name'
COLUMN disk_file_path         FORMAT a20           HEAD 'Path'
COLUMN disk_file_name         FORMAT a20           HEAD 'File Name'
COLUMN disk_file_fail_group   FORMAT a20           HEAD 'Fail Group'
COLUMN total_mb               FORMAT 999,999,999   HEAD 'File Size (MB)'
COLUMN used_mb                FORMAT 999,999,999   HEAD 'Used Size (MB)'
COLUMN pct_used               FORMAT 999.99        HEAD 'Pct. Used'

BREAK ON report ON disk_group_name SKIP 1

COMPUTE sum LABEL ""              OF total_mb used_mb ON disk_group_name
COMPUTE sum LABEL "Grand Total: " OF total_mb used_mb ON report

SELECT
    NVL(a.name, '[CANDIDATE]')                       disk_group_name
  , b.path                                           disk_file_path
  , b.name                                           disk_file_name
  , b.failgroup                                      disk_file_fail_group
  , b.total_mb                                       total_mb
  , (b.total_mb - b.free_mb)                         used_mb
  FROM
    v$asm_diskgroup a RIGHT OUTER JOIN v$asm_disk b USING (group_number)
ORDER BY
    a.name
/


-- ALTER DISKGROUP DATA ADD DISK 'ORCL:DATA05' NAME DATA05 REBALANCE POWER 11
-- ALTER DISKGROUP CARD01 DROP DISK DATA05;
-- select * from v$asm_operation;


SELECT to_char(startup_time,'DD-MON-YYYY HH24:MI:SS') "DB Startup Time"
FROM sys.v_$instance; 



 select 'alter system kill session '''||sid||','||SERIAL#||',@'||INST_ID||''' immediate;'
select 'alter system kill session '''||sid||','||SERIAL#||',@'||INST_ID||''' immediate;'
 from gv$session
 where username='CES'
  select 'alter system kill session '''||sid||','||SERIAL#||',@'||INST_ID||''' immediate;'
 
 
 
 select User,Host,plugin,authentication_string from mysql.user; 
 SHOW REPLICA STATUS \\G 
 
 
 
 ps -eo pcpu,pid,user,args | sort -k1 -r -n | head -20 
 pam_tally2 --reset -u root 
 grep Huge /proc/meminfo 
 alter database recover managed standby database cancel;
 ALTER DATABASE RECOVER MANAGED STANDBY DATABASE USING CURRENT LOGFILE DISCONNECT FROM SESSION; 
 select PROCESS,STATUS,BLOCK#,BLOCKS,SEQUENCE#,THREAD# from v$managed_standby;
set lines 300 
col value for a50 
select name, value from v$dataguard_stats;
 
 
 ps aux | sort -rnk 4 | head -20 
 
 
\n set line 200
\n set pagesize 0
\n column SESS_INFO format a30
\n COLUMN SESS_INFO HEADING 'INST_|SID_SERIAL#'
\n column USER format a30
\n COLUMN USER HEADING 'USER/|MACHINE/|MODULE'
\n column PADDR format a30
\n column event format a30
\n column sql_id format a30
\n column sql_text format a90
\n select /* VIEW SESSION ACTIVE */  distinct s.inst_id|| '_' ||s.sid ||'_'||s.serial# "SESS_INFO",
\n s.username ||'/'||s.machine ||'/'||substr(s.module,1,15) "USER", s.PADDR, s.event,c.sql_id,c.sql_text
\n from gv$session s, gv$sql c
\n where s.username is not null and s.status='ACTIVE' and s.sql_id=c.sql_id(+) and s.inst_id=c.inst_id(+) and (c.sql_text not like '%VIEW SESSION ACTIVE%' or c.sql_text is null) order by 1,4;
 
 
 
 select 'ALTER SYSTEM KILL SESSION '''||sid||','||serial#||''' immediate ;'
\n from v$session
\n where username='&1';

select 'ALTER SYSTEM KILL SESSION '''||sid||','||serial#||''' immediate ;'
\n from v$session s
\n where s.sql_et/1000 >900;

